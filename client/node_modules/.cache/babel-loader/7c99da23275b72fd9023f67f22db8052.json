{"ast":null,"code":"var _jsxFileName = \"/Users/junerockwell/Documents/GraphQLReactNetNinja/client/src/components/BookDetails.js\";\nimport React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getOneBookQuery, getAuthorsQuery, getGenreQuery } from '../queries/queries';\nimport flowright from 'lodash.flowright';\n\nclass BookDetails extends Component {\n  submitForm(e) {\n    e.preventDefault();\n  }\n\n  displayAuthors() {\n    var data = this.props.getAuthorsQuery; // console.log(\"xx\", this.props);\n\n    if (data.loading) {\n      return React.createElement(\"option\", {\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"Loading authors...\");\n    } else {\n      return data.authors.map(author => {\n        return React.createElement(\"option\", {\n          key: author.id,\n          value: author.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, author.name);\n      });\n    }\n  }\n\n  displayGenre(book) {\n    var data = this.props.getGenreQuery;\n\n    if (data.loading) {\n      return React.createElement(\"option\", {\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"Loading genre...\");\n    } else {\n      return data.genre.map(g => {\n        let selected = false;\n\n        if (g.genreId === book.genre.id) {\n          selected = true;\n        } else {\n          selected = false;\n        }\n\n        return React.createElement(\"option\", {\n          key: g.id,\n          value: g.id,\n          selected: selected,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, book.genre.id);\n      });\n    }\n  }\n\n  displayBookDetails() {\n    const {\n      book\n    } = this.props.data;\n\n    if (book) {\n      return (// <div>\n        // \t<h2>{ book.name }</h2>\n        // \t<p>{ book.genre }</p>\n        // \t<p>{ book.author.name }</p>\n        // \t<p>All books by this author:</p>\n        // \t<ul className=\"other-books\">\n        // \t\t{ book.author.books.map(item => {\n        // \t\t\treturn <li key={item.id}>{item.name}</li>\n        // \t\t})}\n        // \t</ul>\n        // </div>\n        React.createElement(\"form\", {\n          id: \"update-book\",\n          onSubmit: this.submitForm.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"field\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \"Book name:\"), React.createElement(\"input\", {\n          type: \"text\",\n          value: book.name,\n          onChange: e => this.setState({\n            name: e.target.value\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"field\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \"Genre:\"), React.createElement(\"select\", {\n          onChange: e => this.setState({\n            genreId: e.target.value\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, \"Select Genre\"), this.displayGenre(book))), React.createElement(\"div\", {\n          className: \"field\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, \"Author:\"), React.createElement(\"select\", {\n          onChange: e => this.setState({\n            authorId: e.target.value\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, \"Select author\"), this.displayAuthors())), React.createElement(\"button\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"Update\"))\n      );\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"No book selected\");\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"book-details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.displayBookDetails());\n  }\n\n}\n\nexport default flowright(graphql(getAuthorsQuery, {\n  name: \"getAuthorsQuery\"\n}), graphql(getGenreQuery, {\n  name: \"getGenreQuery\"\n}), graphql(getOneBookQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.bookId\n      }\n    };\n  }\n}))(BookDetails); // export default graphql(getOneBookQuery, {\n// \toptions: (props) => {\n// \t\treturn {\n// \t\t\tvariables: {\n// \t\t\t\tid: props.bookId\n// \t\t\t}\n// \t\t}\n// \t}\n// })(BookDetails);","map":{"version":3,"sources":["/Users/junerockwell/Documents/GraphQLReactNetNinja/client/src/components/BookDetails.js"],"names":["React","Component","graphql","getOneBookQuery","getAuthorsQuery","getGenreQuery","flowright","BookDetails","submitForm","e","preventDefault","displayAuthors","data","props","loading","authors","map","author","id","name","displayGenre","book","genre","g","selected","genreId","displayBookDetails","bind","setState","target","value","authorId","render","options","variables","bookId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getOneBookQuery, getAuthorsQuery, getGenreQuery } from '../queries/queries';\nimport flowright from 'lodash.flowright';\n\nclass BookDetails extends Component {\n\tsubmitForm(e) {\n\t\te.preventDefault();\n\t}\n\tdisplayAuthors() {\n\t    var data = this.props.getAuthorsQuery;\n\t    // console.log(\"xx\", this.props);\n\t    \n\t    if (data.loading) {\n\t      return (<option disabled>Loading authors...</option>);\n\t    } else {\n\t      return data.authors.map(author => {\n\t        return (\n\t           <option key={author.id} value={author.id}>{ author.name }</option>\n\t        )\n\t      });\n\t    }\n\t  }\n\tdisplayGenre(book) {\n\t    var data = this.props.getGenreQuery;\n\n\t    if (data.loading) {\n\t      return (<option disabled>Loading genre...</option>);\n\t    } else {\n\t      return data.genre.map(g => {\n\t      \tlet selected = false;\n\t      \tif (g.genreId === book.genre.id) {\n\t      \t\tselected = true;\n\t      \t} else {\n\t      \t\tselected = false;\n\t      \t}\n\t        return (\n\t          <option key={g.id} value={g.id} selected={selected}>{ book.genre.id }</option>\n\t        )\n\t      });\n\t    }\n\t  }\n\tdisplayBookDetails() {\n\t  \tconst { book } = this.props.data;\n\t  \tif (book) {\n\n\t  \t\treturn (\n\t  \t\t\t// <div>\n\t  \t\t\t// \t<h2>{ book.name }</h2>\n\t  \t\t\t// \t<p>{ book.genre }</p>\n\t  \t\t\t// \t<p>{ book.author.name }</p>\n\t  \t\t\t// \t<p>All books by this author:</p>\n\t  \t\t\t// \t<ul className=\"other-books\">\n\t  \t\t\t// \t\t{ book.author.books.map(item => {\n\t  \t\t\t// \t\t\treturn <li key={item.id}>{item.name}</li>\n\t  \t\t\t// \t\t})}\n\t  \t\t\t// \t</ul>\n\t  \t\t\t// </div>\n\t  \t\t\t<form id=\"update-book\" onSubmit={this.submitForm.bind(this)}>\n\t  \t\t\t\t<div className=\"field\">\n\t\t\t          \t<label>Book name:</label>\n\t\t\t          \t<input type=\"text\" value={book.name} onChange={ (e) => this.setState({name: e.target.value}) }/>\n\t\t\t        </div>\n\n\t\t\t        <div className=\"field\">\n\t\t          \t\t<label>Genre:</label>\n\t\t          \t\t<select onChange={ (e) => this.setState({genreId: e.target.value}) }>\n\t\t            \t\t<option>Select Genre</option>\n\t\t            \t\t{ this.displayGenre(book) }\n\t\t          \t\t</select>\n\t\t        \t</div>\n\n\t\t        \t<div className=\"field\">\n\t\t          \t\t<label>Author:</label>\n\t\t          \t\t<select onChange={ (e) => this.setState({authorId: e.target.value}) }>\n\t\t            \t\t<option>Select author</option>\n\t\t            \t\t{ this.displayAuthors() }\n\t\t          \t\t</select>\n\t\t        \t</div>\n\n\t\t        \t<button>Update</button>\n\t  \t\t\t</form>\n\t  \t\t)\n\t  \t} else {\n\t  \t\treturn (\n\t  \t\t\t<div>No book selected</div>\n\t  \t\t)\n\t  \t}\n\t}\n\trender() {\n    \treturn (\n    \t\t<div id=\"book-details\">\n    \t\t{ this.displayBookDetails() }\n    \t\t</div>\n    \t);\n  \t}\n}\n\nexport default flowright(\n\tgraphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\n\tgraphql(getGenreQuery, { name: \"getGenreQuery\" }),\n\tgraphql(getOneBookQuery, {\n\t\toptions: (props) => {\n\t\t\treturn {\n\t\t\t\tvariables: {\n\t\t\t\t\tid: props.bookId\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n)(BookDetails);\n\n// export default graphql(getOneBookQuery, {\n// \toptions: (props) => {\n// \t\treturn {\n// \t\t\tvariables: {\n// \t\t\t\tid: props.bookId\n// \t\t\t}\n// \t\t}\n// \t}\n// })(BookDetails);"]},"metadata":{},"sourceType":"module"}