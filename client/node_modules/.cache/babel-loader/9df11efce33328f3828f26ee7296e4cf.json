{"ast":null,"code":"var _jsxFileName = \"/Users/junerockwell/Documents/GraphQLReactNetNinja/client/src/components/BookDetails.js\";\nimport React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getOneBookQuery, getAuthorsQuery, getGenreQuery } from '../queries/queries';\nimport flowright from 'lodash.flowright';\n\nclass BookDetails extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      book\n    } = this.props.data;\n    this.state = {\n      name: book.name,\n      authorId: book.author && book.author.id ? book.author.id : '',\n      genreId: book.genre && book.genre.id ? book.genre.id : ''\n    };\n  }\n\n  submitForm(e) {\n    e.preventDefault();\n    console.log(this.state);\n  }\n\n  displayAuthors() {\n    var data = this.props.getAuthorsQuery; // console.log(\"xx\", this.props);\n\n    if (data.loading) {\n      return React.createElement(\"option\", {\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Loading authors...\");\n    } else {\n      return data.authors.map(author => {\n        return React.createElement(\"option\", {\n          key: author.id,\n          value: author.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, author.name);\n      });\n    }\n  }\n\n  displayGenre() {\n    var data = this.props.getGenreQuery;\n\n    if (data.loading) {\n      return React.createElement(\"option\", {\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Loading genre...\");\n    } else {\n      return data.genre.map(g => {\n        return React.createElement(\"option\", {\n          key: g.id,\n          value: g.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, g.name);\n      });\n    }\n  }\n\n  displayBookDetails() {\n    const {\n      book\n    } = this.props.data;\n\n    if (book) {\n      let genreId = book.genre && book.genre.id || '';\n      let authorId = book.author && book.author.id || '';\n      return (// <div>\n        // \t<h2>{ book.name }</h2>\n        // \t<p>{ book.genre }</p>\n        // \t<p>{ book.author.name }</p>\n        // \t<p>All books by this author:</p>\n        // \t<ul className=\"other-books\">\n        // \t\t{ book.author.books.map(item => {\n        // \t\t\treturn <li key={item.id}>{item.name}</li>\n        // \t\t})}\n        // \t</ul>\n        // </div>\n        React.createElement(\"form\", {\n          id: \"update-book\",\n          onSubmit: this.submitForm.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"field\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \"Book name:\"), React.createElement(\"input\", {\n          type: \"text\",\n          value: this.state.name,\n          onChange: e => this.setState({\n            name: e.target.value\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"field\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, \"Genre:\"), React.createElement(\"select\", {\n          value: genreId,\n          onChange: e => this.setState({\n            genreId: e.target.value\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, \"Select Genre\"), this.displayGenre())), React.createElement(\"div\", {\n          className: \"field\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, \"Author:\"), React.createElement(\"select\", {\n          value: authorId,\n          onChange: e => this.setState({\n            authorId: e.target.value\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"Select author\"), this.displayAuthors())), React.createElement(\"button\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, \"Update\"))\n      );\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"No book selected\");\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"book-details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.displayBookDetails());\n  }\n\n}\n\nexport default flowright(graphql(getAuthorsQuery, {\n  name: \"getAuthorsQuery\"\n}), graphql(getGenreQuery, {\n  name: \"getGenreQuery\"\n}), graphql(getOneBookQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.bookId\n      }\n    };\n  }\n}))(BookDetails); // export default graphql(getOneBookQuery, {\n// \toptions: (props) => {\n// \t\treturn {\n// \t\t\tvariables: {\n// \t\t\t\tid: props.bookId\n// \t\t\t}\n// \t\t}\n// \t}\n// })(BookDetails);","map":{"version":3,"sources":["/Users/junerockwell/Documents/GraphQLReactNetNinja/client/src/components/BookDetails.js"],"names":["React","Component","graphql","getOneBookQuery","getAuthorsQuery","getGenreQuery","flowright","BookDetails","constructor","props","book","data","state","name","authorId","author","id","genreId","genre","submitForm","e","preventDefault","console","log","displayAuthors","loading","authors","map","displayGenre","g","displayBookDetails","bind","setState","target","value","render","options","variables","bookId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { getOneBookQuery, getAuthorsQuery, getGenreQuery } from '../queries/queries';\nimport flowright from 'lodash.flowright';\n\nclass BookDetails extends Component {\n\tconstructor(props) {\n\t    super(props);\n\t  \tconst { book } = this.props.data;\n\t    this.state = {\n\t      name: book.name,\n\t      authorId: book.author && book.author.id ? book.author.id : '',\n\t      genreId: book.genre && book.genre.id ? book.genre.id : '',\n\t    };\n\t }\n\tsubmitForm(e) {\n\t\te.preventDefault();\n\t\tconsole.log(this.state);\n\t}\n\tdisplayAuthors() {\n\t    var data = this.props.getAuthorsQuery;\n\t    // console.log(\"xx\", this.props);\n\t    \n\t    if (data.loading) {\n\t      return (<option disabled>Loading authors...</option>);\n\t    } else {\n\t      return data.authors.map(author => {\n\t        return (\n\t           <option key={author.id} value={author.id}>{ author.name }</option>\n\t        )\n\t      });\n\t    }\n\t  }\n\tdisplayGenre() {\n\t    var data = this.props.getGenreQuery;\n\n\t    if (data.loading) {\n\t      return (<option disabled>Loading genre...</option>);\n\t    } else {\n\t      return data.genre.map(g => {\n\t        return (\n\t          <option key={g.id} value={g.id}>{ g.name }</option>\n\t        )\n\t      });\n\t    }\n\t  }\n\tdisplayBookDetails() {\n\t  \tconst { book } = this.props.data;\n\t  \tif (book) {\n\t  \t\tlet genreId = (book.genre && book.genre.id) || '';\n\t  \t\tlet authorId = (book.author && book.author.id) || '';\n\t  \t\treturn (\n\t  \t\t\t// <div>\n\t  \t\t\t// \t<h2>{ book.name }</h2>\n\t  \t\t\t// \t<p>{ book.genre }</p>\n\t  \t\t\t// \t<p>{ book.author.name }</p>\n\t  \t\t\t// \t<p>All books by this author:</p>\n\t  \t\t\t// \t<ul className=\"other-books\">\n\t  \t\t\t// \t\t{ book.author.books.map(item => {\n\t  \t\t\t// \t\t\treturn <li key={item.id}>{item.name}</li>\n\t  \t\t\t// \t\t})}\n\t  \t\t\t// \t</ul>\n\t  \t\t\t// </div>\n\t  \t\t\t<form id=\"update-book\" onSubmit={this.submitForm.bind(this)}>\n\t  \t\t\t\t<div className=\"field\">\n\t\t\t          \t<label>Book name:</label>\n\t\t\t          \t<input type=\"text\" value={this.state.name} onChange={ (e) => this.setState({name: e.target.value}) }/>\n\t\t\t        </div>\n\n\t\t\t        <div className=\"field\">\n\t\t          \t\t<label>Genre:</label>\n\t\t          \t\t<select value={genreId} onChange={ (e) => this.setState({genreId: e.target.value}) }>\n\t\t            \t\t<option>Select Genre</option>\n\t\t            \t\t{ this.displayGenre() }\n\t\t          \t\t</select>\n\t\t        \t</div>\n\n\t\t        \t<div className=\"field\">\n\t\t          \t\t<label>Author:</label>\n\t\t          \t\t<select value={authorId} onChange={ (e) => this.setState({authorId: e.target.value}) }>\n\t\t            \t\t<option>Select author</option>\n\t\t            \t\t{ this.displayAuthors() }\n\t\t          \t\t</select>\n\t\t        \t</div>\n\n\t\t        \t<button>Update</button>\n\t  \t\t\t</form>\n\t  \t\t)\n\t  \t} else {\n\t  \t\treturn (\n\t  \t\t\t<div>No book selected</div>\n\t  \t\t)\n\t  \t}\n\t}\n\trender() {\n    \treturn (\n    \t\t<div id=\"book-details\">\n    \t\t{ this.displayBookDetails() }\n    \t\t</div>\n    \t);\n  \t}\n}\n\nexport default flowright(\n\tgraphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\n\tgraphql(getGenreQuery, { name: \"getGenreQuery\" }),\n\tgraphql(getOneBookQuery, {\n\t\toptions: (props) => {\n\t\t\treturn {\n\t\t\t\tvariables: {\n\t\t\t\t\tid: props.bookId\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n)(BookDetails);\n\n// export default graphql(getOneBookQuery, {\n// \toptions: (props) => {\n// \t\treturn {\n// \t\t\tvariables: {\n// \t\t\t\tid: props.bookId\n// \t\t\t}\n// \t\t}\n// \t}\n// })(BookDetails);"]},"metadata":{},"sourceType":"module"}